options
{
    /** 使用jdk1.6 */
    JDK_VERSION = "1.6";

    /** 生成非静态方法 */
    static = false;

    /** 让jjtree给每个非终结符生成一个对象 */
    MULTI = true;

    /** 开启访问者模式 */
    VISITOR = true;
}

PARSER_BEGIN(Parser)
package cc.concurrent.mango.parser;

import java.io.StringReader;
import java.io.Reader;

public class Parser {
    public Parser(String s) {
        this((Reader)(new StringReader(s)));
    }
}
PARSER_END(Parser)

TOKEN :
{
        <#COLON: ":" >
    |   <#NUMBER: ["1"-"9"] (["0"-"9"])* >
    |   <#DOT: "." >
    |   <#FIELD: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_", "0"-"9"])* >
    |   <IN_PARAM: "(" (" ")* <COLON> <NUMBER> (<DOT> <FIELD>)* (" ")* ")" >
    |   <OUT_PARAM: <COLON> <NUMBER> (<DOT> <FIELD>)* >
    |   <EXPR_START: "${" > {SwitchTo(G);}
}

TOKEN:
{
        <TEXT: (~[":", "$", "(", "."])+ >
}

<G>
TOKEN:
{
        <PARAM: <COLON> <NUMBER> (<DOT> <FIELD>)* >
    |   <EXPR_END: "}" > {SwitchTo(DEFAULT);}
}


SimpleNode parse()  #RootNode :
{
}
{
    (Text() | OutParam() | InParam() | Expr())+ <EOF>
    {
        return jjtThis;
    }
}

void OutParam() #OutParamNode :
{
    Token t;
}
{
    t=<OUT_PARAM>
    {
        jjtThis.setParam(t.image);
    }
}

void InParam() #InParamNode :
{
    Token t;
}
{
    t=<IN_PARAM>
    {
        jjtThis.setParam(t.image);
    }
}

void Text() #TextNode :
{
    Token t;
}
{
    t=<TEXT>
    {
        jjtThis.setText(t.image);
    }
}

void Expr() #void : // 标记为void不生成节点
{

}
{
    <EXPR_START> Add() <EXPR_END>
}

void Add() #AddNode :
{}
{
    Mul() ( ( "+" | "-" ) Mul() )*
}

void Mul() #MulNode :
{}
{
    Param() ( ( "*" | "/" | "%" ) Param() )*
}

void Param() #ParamNode :
{}
{
    <PARAM>
}