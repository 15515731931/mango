options
{
    /** 使用jdk1.6 */
    JDK_VERSION = "1.6";

    /** 生成非静态方法 */
    static = false;

    /** 标记开始token与结束token */
    TRACK_TOKENS=true;

    /** 让jjtree给每个非终结符生成一个对象 */
    MULTI = true;

    /** 开启访问者模式 */
    VISITOR = true;

    /** 忽略大小写 */
    IGNORE_CASE = true;

}

PARSER_BEGIN(Parser)
package cc.concurrent.mango.runtime.parser;

import java.io.StringReader;
import java.io.Reader;

public class Parser {
    public Parser(String s) {
        this((Reader)(new StringReader(s)));
    }
}
PARSER_END(Parser)

SKIP :
{
        " "
}

TOKEN:
{
        <#COLON: ":" >
    |   <#NUMBER: ["1"-"9"] (["0"-"9"])* >
    |   <#DOT: "." >
    |   <#FIELD: ["a"-"z","_"] (["a"-"z","_", "0"-"9"])* >
    |   <#PARAMETER: <COLON> (<NUMBER>|<FIELD>) (<DOT> <FIELD>)* >
}

TOKEN:
{
        <NON_ITERABLE_PARAMETER: <PARAMETER> >
    |   <IN_START: "in" (" ")* "(" > {SwitchTo(I);}
    |   <EXPR_START: "${" > {SwitchTo(G);}
    |   <TEXT: (~[":", "$", " "])+ >
}

<I>
SKIP :
{
        " "
}

<I>
TOKEN :
{
        <ITERABLE_PARAMETER: <PARAMETER> >
    |   <IN_END: ")" > {SwitchTo(DEFAULT);}
}


<G>
SKIP :
{
        " "
}

<G>
TOKEN :
{
        <VARIABLE: <PARAMETER> >
    |   <MINUS: "-">
    |   <PLUS: "+">
    |   <MULTIPLY: "*">
    |   <DIVIDE: "/">
    |   <MODULUS: "%">
    |   <INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* >
    |   <LEFT_PAREN: "(" >
    |   <RIGHT_PAREN: ")" >
    |   <EXPR_END: "}" > {SwitchTo(DEFAULT);}
}

ASTRootNode parse()  #RootNode :
{
}
{
    (LOOKAHEAD(2) IterableParameter() | Text() | NonIterableParameter() | DirectiveExpression())+ <EOF>
    {
        return jjtThis;
    }
}

void NonIterableParameter() :
{
    Token t;
}
{
    t=<NON_ITERABLE_PARAMETER>
    {
        jjtThis.setParameter(t.image);
    }
}

void IterableParameter() :
{
    Token t;
}
{
    t=<TEXT> {jjtThis.setField(t.image);} <IN_START> t=<ITERABLE_PARAMETER> {jjtThis.setParameter(t.image);} <IN_END>
}

void Text() :
{
    Token t;
}
{
    t=<TEXT>
    {
        jjtThis.setText(t.image);
    }
}

void DirectiveExpression() #void : // 标记为void不生成节点
{
}
{
    <EXPR_START> Expression() <EXPR_END>
}


void Expression() :
{
}
{
    AdditiveExpression()
}

void AdditiveExpression() #void : // 标记为void不生成节点
{}
{
    MultiplicativeExpression()
    (
            <PLUS>  MultiplicativeExpression() #AddNode(2)
        |   <MINUS> MultiplicativeExpression() #SubtractNode(2)
    )*
}

void MultiplicativeExpression() #void : // 标记为void不生成节点
{}
{
    PrimaryExpression()
    (
            <MULTIPLY>  PrimaryExpression() #MulNode(2)
        |   <DIVIDE>  PrimaryExpression() #DivNode(2)
        |   <MODULUS>  PrimaryExpression() #ModNode(2)
    )*
}

void PrimaryExpression() #void :
{}
{
        Variable()
    |   IntegerLiteral()
    |   <LEFT_PAREN> AdditiveExpression() <RIGHT_PAREN>
}

void Variable() :
{
    Token t;
}
{
    t=<VARIABLE>
    {
        jjtThis.setParameter(t.image);
    }
}

void IntegerLiteral() :
{
    Token t;
}
{
    t=<INTEGER_LITERAL>
    {
        jjtThis.setValue(Integer.valueOf(t.image));
    }
}